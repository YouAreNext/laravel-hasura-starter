"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")
enum RegisterStatuses {
    MUST_VERIFY_EMAIL
    SUCCESS
}

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}


type Mutation {
    login(data: LoginInput @spread): 
        AuthPayload!

    register(data: RegisterInput @spread): 
        RegisterResponse!
}


type AuthPayload {
    access_token: String
    refresh_token: String!
    expires_in: Int!
    token_type: String!
    user: User!
}

type RegisterResponse {
    tokens: AuthPayload
    status: RegisterStatuses!
}

input RegisterInput {
    name: String
    email: String
    password: String
    password_confirmation: String
}


input LoginInput {
    username: String @rules(apply: ["email", "required"], messages: { email: "Email указан неверно", required: "Поле Email обязательно для заполнения" })
    password: String @rules(apply: ["required"], messages: { required: "Поле пароль обязательно для заполнения" })
}
